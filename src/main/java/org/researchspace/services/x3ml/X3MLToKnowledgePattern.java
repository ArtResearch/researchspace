package org.researchspace.services.x3ml;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.eclipse.rdf4j.model.BNode;
import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.ValueFactory;
import org.eclipse.rdf4j.model.impl.SimpleValueFactory;
import org.eclipse.rdf4j.model.util.ModelBuilder;
import org.eclipse.rdf4j.model.vocabulary.RDF;
import org.eclipse.rdf4j.model.vocabulary.RDFS;
import org.eclipse.rdf4j.model.vocabulary.SP;
import org.eclipse.rdf4j.model.vocabulary.XSD;
import org.researchspace.data.rdf.PointedGraph;
import org.researchspace.data.rdf.container.FieldDefinitionContainer;
import org.researchspace.data.rdf.container.LDPContainer;
import org.researchspace.data.rdf.container.LDPImplManager;
import org.researchspace.repository.MpRepositoryProvider;
import org.researchspace.repository.RepositoryManager;
import org.researchspace.services.x3ml.X3MLToSPARQL.LinkInfo;
import org.researchspace.vocabulary.FIELDS;
import org.w3c.dom.Document;

import com.google.common.collect.Sets;

@Singleton
public class X3MLToKnowledgePattern {

    @Inject
    private RepositoryManager repositoryManager;

    private ValueFactory vf = SimpleValueFactory.getInstance();

    public List<IRI> generateKnowledgePatterns(Document x3ml) {
        try {
            X3MLToSPARQL x3mlToSPARQL = new X3MLToSPARQL();
            List<LinkInfo> links = x3mlToSPARQL.processXml(x3ml);

            return links.stream().map(link -> {
                try {
                    PointedGraph kpGraph = this.generateKp(link);
                    return this.saveKp(kpGraph);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }).collect(Collectors.toList());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public List<LinkInfo> generateTextKnowledgePatterns(Document x3ml) {
        List<LinkInfo> links = new X3MLToSPARQL().processXml(x3ml);
        return links.stream().filter(link -> link.resultType.equals(RDFS.LITERAL.stringValue()))
                .collect(Collectors.toList());
    }

    private PointedGraph generateKp(LinkInfo link) throws UnsupportedEncodingException {
        ModelBuilder builder = new ModelBuilder();
        IRI kpIri = this.vf.createIRI("https://artresearch.net/resource/fieldDefinition/",
                URLEncoder.encode(link.linkName, "UTF-8"));

        builder.subject(kpIri).add(RDF.TYPE, FIELDS.FIELD_TYPE).add(FIELDS.AUTOGENERATED, true)
                .add(FIELDS.MIN_OCCURS, "0").add(FIELDS.MAX_OCCURS, "unbound").add(RDFS.LABEL, link.linkName)
                .add(FIELDS.DOMAIN, vf.createIRI(link.domain));

        // generate KP insert pattern and add it to the KP
        String insertPattern = "INSERT { $subject ?predicate $value . } WHERE {}";
        BNode insertQueryNode = this.vf.createBNode();
        builder.subject(kpIri).add(FIELDS.INSERT_PATTERN, insertQueryNode).subject(insertQueryNode).add(RDF.TYPE, SP.QUERY_CLASS)
                .add(SP.TEXT_PROPERTY, insertPattern);

        // generate KP select pattern and add it to the KP
        BNode selectQueryNode = this.vf.createBNode();
        builder.subject(kpIri).add(FIELDS.SELECT_PATTERN, selectQueryNode).subject(selectQueryNode).add(RDF.TYPE, SP.QUERY_CLASS)
                .add(SP.TEXT_PROPERTY, link.query);
        if (link.resultType.equals(RDFS.LITERAL.stringValue())) {
            builder.subject(kpIri).add(FIELDS.XSD_DATATYPE, XSD.STRING);
        } else if (link.resultType.equals(XSD.DATETIME.stringValue())) {
            builder.subject(kpIri).add(FIELDS.XSD_DATATYPE, XSD.DATETIME);
        } else {
            builder.subject(kpIri).add(FIELDS.XSD_DATATYPE, XSD.ANYURI).add(FIELDS.RANGE, this.vf.createIRI(link.resultType));
        }

        return new PointedGraph(kpIri, builder.build());
    }

    private IRI saveKp(PointedGraph kpGraph) {
        LDPContainer container = (LDPContainer) LDPImplManager.getLDPImplementation(FieldDefinitionContainer.IRI,
                Sets.newIdentityHashSet(),
                new MpRepositoryProvider(repositoryManager, RepositoryManager.ASSET_REPOSITORY_ID));

        if (container.containsLDPResource(kpGraph.getPointer())) {
            container.update(kpGraph);
        } else {
            container.add(kpGraph);
        }
        return kpGraph.getPointer();
    }
}
